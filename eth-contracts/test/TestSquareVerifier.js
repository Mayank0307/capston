// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
var Proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {

    const accountone = accounts[0];
    const accounttwo = accounts[1];
    const accountthree = accounts[2];
    const accountfour = accounts[3];
    const accountfive = accounts[4];
    const accountsix = accounts[5];

    describe('Verifier Contract Tests', function () {
        beforeEach(async function () { 
            this.squareVerifier = await SquareVerifier.new({from: accountone});
        });
    
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Verify provided Proof for contract - SquareVerifier', async function () { 
           
           let result = await this.squareVerifier.verifyTx(Proof.proof.a,
                        Proof.proof.b, Proof.proof.c, Proof.inputs);
            console.log('Return value of verifyTx() function execution is '+result);
            console.log('Json stringify result 1 is '+JSON.stringify(result, null, 4)); //https://ethereum.stackexchange.com/questions/41270/solidity-function-returns-object-object
            assert.equal(result.logs[0].event, 'Verified','Verified event was not emitted - Proof failed');
            
        });

        it('Testing again with verifyTx.call() this time', async function () { 
           
            // Functions that do not require a transaction to be sent can be called directly with .call().
            let result = await this.squareVerifier.verifyTx.call(Proof.proof.a,
                         Proof.proof.b, Proof.proof.c, Proof.inputs);
            console.log('Return value of verifyTx() function execution is '+result);
            assert.equal(result, true,'Result should be true - Proof failed');  
        });


        // Test verification with incorrect proof
        it('Incorrect Proof verifyTx shall return false', async function () { 
            
            incorrectProof = [10,1];
            let result = await this.squareVerifier.verifyTx.call(Proof.proof.a,
                Proof.proof.b, Proof.proof.c, incorrectProof);
            console.log('The proof should fail and return false: result = '+result);
            assert.equal(result, false,'Result should have been false');     
        });

    });
});





    

